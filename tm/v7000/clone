#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2014, Laurent Grawet <dev@grawet.be>                             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i size vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../datastore/v7000/v7000.conf
. ${DRIVER_PATH}/../../datastore/v7000/scripts_v7000.sh

#-------------------------------------------------------------------------------
# Set src, dst path and dir
#-------------------------------------------------------------------------------

IQN=`arg_path $SRC`
DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

#-------------------------------------------------------------------------------
# Get DS information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID| $XPATH \
                    /DATASTORE/TEMPLATE/MGMT \
                    /DATASTORE/TEMPLATE/MGMT_AUX \
                    /DATASTORE/TEMPLATE/REPLICATION \
                    /DATASTORE/TEMPLATE/FAILOVER \
                    /DATASTORE/TEMPLATE/SNAPSHOT \
                    /DATASTORE/TEMPLATE/COPIES \
                    /DATASTORE/TEMPLATE/GRAINSIZE \
                    /DATASTORE/TEMPLATE/SNAPSHOT_RSIZE \
                    /DATASTORE/TEMPLATE/COPYRATE \
                    /DATASTORE/TEMPLATE/CLEANRATE)

MGMT=${XPATH_ELEMENTS[0]:-$MGMT}
MGMT_AUX=${XPATH_ELEMENTS[1]:-$MGMT_AUX}
REPLICATION=${XPATH_ELEMENTS[2]:-$REPLICATION}
FAILOVER=${XPATH_ELEMENTS[3]:-$FAILOVER}
SNAPSHOT=${XPATH_ELEMENTS[4]:-$SNAPSHOT}
COPIES=${XPATH_ELEMENTS[5]:-$COPIES}
GRAINSIZE=${XPATH_ELEMENTS[6]:-$GRAINSIZE}
SNAPSHOT_RSIZE=${XPATH_ELEMENTS[7]:-$SNAPSHOT_RSIZE}
COPYRATE=${XPATH_ELEMENTS[8]:-$COPYRATE}
CLEANRATE=${XPATH_ELEMENTS[9]:-$CLEANRATE}

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

VDISK_NAME=`echo $IQN|$AWK -F. '{print $(NF)}'`

if [ $FAILOVER -eq 1 ]; then
    MGMT=$MGMT_AUX
    VDISK_NAME=${VDISK_NAME}-aux
fi

VDISK_UID=$(v7000_get_vdisk_uid $VDISK_NAME $MGMT)
TARGET_VDISK_NAME=$VDISK_NAME-snapshot-$VMID
SIZE=$(v7000_get_vdisk_size $VDISK_NAME $MGMT)

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

if [ $SNAPSHOT -eq 1 ]; then
    AUTODELETE=""
    AUTOEXPAND="-autoexpand"
    GRAINSIZE_PAR="-grainsize ${GRAINSIZE}"
    SNAPSHOT_RSIZE_PAR="-rsize ${SNAPSHOT_RSIZE}"
    COPYRATE=0
    CLEANRATE=0
else
    AUTODELETE="-autodelete"
    AUTOEXPAND=""
    SNAPSHOT_RSIZE_PAR=""
    GRAINSIZE_PAR=""
fi

REGISTER_CMD="set -e ; svctask mkvdisk ${AUTOEXPAND} -cache readwrite -copies ${COPIES} \
    ${GRAINSIZE_PAR} -iogrp ${IO_GROUP} -mdiskgrp ${MDISK_GROUP} -name ${TARGET_VDISK_NAME} \
    ${SNAPSHOT_RSIZE_PAR} -size ${SIZE} -syncrate ${SYNC_RATE} -unit b -vtype ${VTYPE}"
v7000_ssh_exec_and_log "$MGMT" "$REGISTER_CMD" "Error registering $MGMT:$VDISK_NAME"

FLASHCOPY_CMD="set -e ; mkfcmap ${AUTODELETE} -copyrate ${COPYRATE} -cleanrate ${CLEANRATE} \
    -source ${VDISK_NAME} -target ${TARGET_VDISK_NAME} -name ${TARGET_VDISK_NAME} ; \
    svctask startfcmap -prep ${TARGET_VDISK_NAME} ; \
    sleep 5"
v7000_ssh_exec_and_log "$MGMT" "$FLASHCOPY_CMD" \
    "Error making FLashCopy mapping from $VDISK_NAME to $TARGET_VDISK_NAME"

TARGET_VDISK_UID=$(v7000_get_vdisk_uid $TARGET_VDISK_NAME $MGMT)
DEV="/dev/mapper/3${TARGET_VDISK_UID}"

v7000_map "$MGMT" "$DST_HOST" "$TARGET_VDISK_NAME"

DISCOVER_CMD=$(cat <<EOF
    set -e
    mkdir -p "$DST_DIR"
    $SUDO $(iscsiadm_session_rescan)
    $SUDO $(multipath_rescan)
    # Wait a bit for new mapping
    COUNTER=1
    while [ ! -e "$DEV" ] && [ \$COUNTER -le 10 ]; do
        sleep 1
        COUNTER=\$((\$COUNTER + 1))
    done
    if [ ! -e "$DEV" ]; then
        # Last chance to get our mapping
        $SUDO $(multipath_rescan)
        COUNTER=1
        while [ ! -e "$DEV" ] && [ \$COUNTER -le 10 ]; do
            sleep 1
            COUNTER=\$((\$COUNTER + 1))
        done
    fi
    # Exit with error if mapping does not exist
    if [ ! -e "$DEV" ]; then
        exit 1
    fi
    DM_HOLDER=dm-\$($SUDO $DMSETUP info -c --noheadings "$DEV" | $AWK -F: '{print \$3}')
    # Exit with error if mapping has no path
    if [ ! "\$(ls -A /sys/block/\${DM_HOLDER}/slaves)" ]; then
        exit 1
    fi
    ln -sf "$DEV" "$DST_PATH"
EOF
)

ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
        "Error registering $DST_HOST:$DEV"

exit 0
