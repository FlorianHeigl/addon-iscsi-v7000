#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2014-2016, Laurent Grawet <dev@grawet.be>                             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/v7000.conf
. ${DRIVER_PATH}/scripts_v7000.sh

# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/ID \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/UMASK \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/MGMT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/MGMT_AUX \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/REPLICATION \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/FAILOVER \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/THIN_PROVISION \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RSIZE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/COPIES \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/COPYRATE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CLEANRATE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/GRAINSIZE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/IO_GROUP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/MDISK_GROUP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SYNC_RATE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VTYPE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CLUSTER \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BASE_IQN \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/CLONING_ID)

DSID="${XPATH_ELEMENTS[0]}"
BASE_PATH="${XPATH_ELEMENTS[1]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[2]}"
SAFE_DIRS="${XPATH_ELEMENTS[3]}"
UMASK="${XPATH_ELEMENTS[4]}"
BRIDGE_LIST="${XPATH_ELEMENTS[5]:-$BRIDGE_LIST}"
MGMT="${XPATH_ELEMENTS[6]:-$MGMT}"
MGMT_AUX="${XPATH_ELEMENTS[7]:-$MGMT_AUX}"
REPLICATION="${XPATH_ELEMENTS[8]:-$REPLICATION}"
FAILOVER="${XPATH_ELEMENTS[9]:-$FAILOVER}"
THIN_PROVISION="${XPATH_ELEMENTS[10]:-$THIN_PROVISION}"
RSIZE="${XPATH_ELEMENTS[11]:-$RSIZE}"
COPIES="${XPATH_ELEMENTS[12]:-$COPIES}"
COPYRATE="${XPATH_ELEMENTS[13]:-$COPYRATE}"
CLEANRATE="${XPATH_ELEMENTS[14]:-$CLEANRATE}"
GRAINSIZE="${XPATH_ELEMENTS[15]:-$GRAINSIZE}"
IO_GROUP="${XPATH_ELEMENTS[16]:-$IO_GROUP}"
MDISK_GROUP="${XPATH_ELEMENTS[17]:-$MDISK_GROUP}"
SYNC_RATE="${XPATH_ELEMENTS[18]:-$SYNC_RATE}"
VTYPE="${XPATH_ELEMENTS[19]:-$VTYPE}"
CLUSTER="${XPATH_ELEMENTS[20]:-$CLUSTER}"
BASE_IQN="${XPATH_ELEMENTS[21]:-$BASE_IQN}"
SRC="${XPATH_ELEMENTS[22]}"
SIZE="${XPATH_ELEMENTS[23]}"
CLONING_ID="${XPATH_ELEMENTS[24]}"

DST_HOST=`get_destination_host $ID`

# Get source image properties
unset i XPATH_ELEMENTS
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $CLONING_ID| $XPATH \
                    /IMAGE/DATASTORE_ID)

SRC_DSID=${XPATH_ELEMENTS[0]}

# -------- Start actions ------------

SRC_VDISK_NAME=$(echo $SRC|awk -F. '{print $NF}')
VDISK_NAME="one-${ID}"
IQN="$BASE_IQN:2545.`echo $MGMT | awk -F'.' '{print $1}'`.node1.$VDISK_NAME"

if [ $FAILOVER -eq 1 ]; then
    MGMT=$MGMT_AUX
    VDISK_NAME=${VDISK_NAME}-aux
fi

if [ $THIN_PROVISION -eq 1 ]; then
    AUTOEXPAND="-autoexpand"
    GRAINSIZE_PAR="-grainsize ${GRAINSIZE}"
    RSIZE_PAR="-rsize ${RSIZE}"
else
    AUTOEXPAND=""
    GRAINSIZE_PAR=""
    RSIZE_PAR=""
fi

# Create new vdisk
REGISTER_CMD="set -e ; svctask mkvdisk ${AUTOEXPAND} -cache readwrite -copies ${COPIES} \
    ${GRAINSIZE_PAR} -iogrp ${IO_GROUP} -mdiskgrp ${MDISK_GROUP} -name ${VDISK_NAME} \
    ${RSIZE_PAR} -size ${SIZE} -syncrate ${SYNC_RATE} -unit mb -vtype ${VTYPE}"
v7000_ssh_exec_and_log "$MGMT" "$REGISTER_CMD" "Error registering $MGMT:$VDISK_NAME"

if [ "$DSID" = "$SRC_DSID" ]; then
    # Cloning to the same datastore
    FLASHCOPY_CMD="set -e ; mkfcmap -autodelete -copyrate ${COPYRATE} -cleanrate ${CLEANRATE} \
        -source ${SRC_VDISK_NAME} -target ${VDISK_NAME} -name ${VDISK_NAME} ; \
        svctask startfcmap -prep ${VDISK_NAME} ; \
        sleep 5"
    v7000_ssh_exec_and_log "$MGMT" "$FLASHCOPY_CMD" \
        "Error making FLashCopy mapping from $SRC_VDISK_NAME to $VDISK_NAME"
else
    # Cloning to a different target datastore
    VDISK_UID=`v7000_get_vdisk_uid $VDISK_NAME $MGMT`
    MAP_NAME="3${VDISK_UID}"
    DEV="/dev/mapper/${MAP_NAME}"

    # Get source datastore properties
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

    unset i XPATH_ELEMENTS
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onedatastore show -x $SRC_DSID| $XPATH \
                        /DATASTORE/TEMPLATE/MGMT \
                        /DATASTORE/TEMPLATE/MGMT_AUX \
                        /DATASTORE/TEMPLATE/REPLICATION \
                        /DATASTORE/TEMPLATE/FAILOVER)

    SRC_MGMT="${XPATH_ELEMENTS[0]:-$MGMT}"
    SRC_MGMT_AUX="${XPATH_ELEMENTS[1]:-$MGMT_AUX}"
    SRC_REPLICATION="${XPATH_ELEMENTS[2]:-$REPLICATION}"
    SRC_FAILOVER="${XPATH_ELEMENTS[3]:-$FAILOVER}"

    if [ $SRC_REPLICATION -eq 1 ]; then
        if [ $SRC_FAILOVER -eq 1 ]; then
            SRC_MGMT=$SRC_MGMT_AUX
            SRC_PRIMARY="aux"
            SRC_VDISK_NAME=${SRC_VDISK_NAME}-aux
        else
            SRC_PRIMARY="master"
        fi
    fi

    SRC_VDISK_UID=`v7000_get_vdisk_uid $SRC_VDISK_NAME $SRC_MGMT`
    SRC_MAP_NAME="3${SRC_VDISK_UID}"
    SRC_DEV="/dev/mapper/${SRC_MAP_NAME}"
    SRC_RSHIP_NAME="${SRC_VDISK_NAME}"

    # Switch primary src disk
    if v7000_is_rcrelationship ${SRC_RSHIP_NAME} ${SRC_MGMT}; then
        if ! v7000_is_primary ${SRC_RSHIP_NAME} ${SRC_PRIMARY} ${SRC_MGMT}; then
            SWITCH_CMD="set -e ; svctask switchrcrelationship -primary ${SRC_PRIMARY} ${SRC_RSHIP_NAME}"
            v7000_ssh_exec_and_log "$SRC_MGMT" "$SWITCH_CMD" "Error setting $SRC_MGMT:$SRC_RSHIP_NAME as primary"
        fi
    fi

    CLONE_CMD=$(cat <<EOF
        set -e
        $SUDO $(iscsiadm_session_rescan)
        $SUDO $(multipath_rescan)
        # Wait a bit for new mappings
        COUNTER=1
        while { [ ! -e "$SRC_DEV" ] || [ ! -e "$DEV" ]; } && [ \$COUNTER -le 10 ]; do
            sleep 1
            COUNTER=\$((\$COUNTER + 1))
        done
        if [ ! -e "$SRC_DEV" ] || [ ! -e "$DEV" ]; then
            # Last chance to get our mappings
            $SUDO $(multipath_rescan)
            COUNTER=1
            while { [ ! -e "$SRC_DEV" ] || [ ! -e "$DEV" ]; } && [ \$COUNTER -le 10 ]; do
                sleep 1
                COUNTER=\$((\$COUNTER + 1))
            done
        fi
        # Exit with error if mappings do not exist
        if [ ! -e "$SRC_DEV" ] || [ ! -e "$DEV" ]; then
            exit 1
        fi

        SRC_DM_HOLDER=dm-\$($SUDO $DMSETUP info -c --noheadings "$SRC_DEV" | $AWK -F: '{print \$3}')
        DM_HOLDER=dm-\$($SUDO $DMSETUP info -c --noheadings "$DEV" | $AWK -F: '{print \$3}')
        SRC_DM_SLAVE=\$(ls -A /sys/block/\${SRC_DM_HOLDER}/slaves)
        DM_SLAVE=\$(ls -A /sys/block/\${DM_HOLDER}/slaves)

        # Wait a bit for mapping's paths
        COUNTER=1
        while [ ! "\${SRC_DM_SLAVE}"  ] || [ ! "\${DM_SLAVE}"  ] && [ \$COUNTER -le 10 ]; do
            sleep 1
            COUNTER=\$((\$COUNTER + 1))
        done
        # Exit with error if mappings have no path
        if [ ! "\${SRC_DM_SLAVE}" ] || [ ! "\${DM_SLAVE}" ]; then
            exit 1
        fi

        $SUDO $(clone_command "$SRC_DEV" "$DEV")

        $SUDO $(multipath_flush "$SRC_MAP_NAME")
        $SUDO $(multipath_flush "$MAP_NAME")

        unset device 
        for device in \${SRC_DM_SLAVE}
        do
            $SUDO $BLOCKDEV --flushbufs /dev/\${device}
            echo 1 | $SUDO $TEE /sys/block/\${device}/device/delete
        done

        unset device 
        for device in \${DM_SLAVE}
        do
            $SUDO $BLOCKDEV --flushbufs /dev/\${device}
            echo 1 | $SUDO $TEE /sys/block/\${device}/device/delete
        done
EOF
)

    v7000_map "$SRC_MGMT" "$DST_HOST" "$SRC_VDISK_NAME"
    v7000_map "$MGMT" "$DST_HOST" "$VDISK_NAME"

    ssh_exec_and_log "$DST_HOST" "$CLONE_CMD" \
        "Error cloning $SRC_VDISK_NAME to $VDISK_NAME"
fi

# Manage new vdisk replication
if [ $REPLICATION -eq 1 ] && [ $FAILOVER -eq 0 ]; then
    REGISTER2_CMD="set -e ; svctask mkvdisk ${AUTOEXPAND} -cache readwrite -copies ${COPIES} \
        ${GRAINSIZE_PAR} -iogrp ${IO_GROUP} -mdiskgrp ${MDISK_GROUP} -name ${VDISK_NAME}-aux \
        ${RSIZE_PAR} -size ${SIZE} -syncrate ${SYNC_RATE} -unit mb -vtype ${VTYPE}"
    v7000_ssh_exec_and_log "$MGMT_AUX" "$REGISTER2_CMD" "Error registering $MGMT_AUX:$VDISK_NAME"
    REPLICATION_CMD="set -e ; svctask mkrcrelationship -master ${VDISK_NAME} -aux ${VDISK_NAME}-aux \
        -cluster ${CLUSTER} -name ${VDISK_NAME} ; \
        svctask startrcrelationship -force ${VDISK_NAME}"
    v7000_ssh_exec_and_log "$MGMT" "$REPLICATION_CMD" "Error replicating $MGMT:$VDISK_NAME"
fi

echo "$IQN"
